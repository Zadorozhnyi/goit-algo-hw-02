def check_brackets(brackets_str: str) -> bool:
    # Перевіряє симетричність дужок у вхідному рядку.
    # Повертає True, якщо всі дужки правильно збалансовані,
    # і False – якщо є помилки в симетрії.

    # Словник для встановлення відповідності "закриваюча дужка" -> "відкриваюча дужка"
    matching_pairs = {
        ')': '(',
        ']': '[',
        '}': '{'
    }
    
    # Стек для зберігання відкриваючих дужок
    stack = []
    
    # Перебираємо кожен символ у рядку
    for char in brackets_str:
        # Якщо це відкриваюча дужка – покласти в стек
        if char in '([{':
            stack.append(char)
        # Якщо це закриваюча дужка – перевірити відповідність
        elif char in ')]}':
            # Якщо стек порожній, а натрапили на закриваючу дужку – помилка
            if not stack:
                return False
            # Дістаємо останню відкриваючу дужку зі стеку
            last_open = stack.pop()
            # Перевіряємо, чи відповідає вона типу закриваючої дужки
            if matching_pairs[char] != last_open:
                return False
        else:
            # У разі потреби можна ігнорувати будь-які інші символи або реагувати на них
            # Тут для наочності просто пропускаємо (ігноруємо)
            pass
    
    # Якщо після проходу рядка в стеку ще залишилися відкриті дужки – помилка
    return len(stack) == 0

def main():
    # Тести з умови задачі та інші приклади
    test_strings = [
        "( ){[ 1 ]( 1 + 3 )( ){ }}",  # Симетрично
        "( 23 ( 2 - 3);",            # Несиметрично
        "( 11 }",                    # Несиметрично
        "((){})",                    # Симетрично
        "((())",                     # Несиметрично (не всі закриті)
        ")(}{",                      # Несиметрично (порядок порушено)
        "( [ { ( ) } ] )",           # Симетрично
    ]
    
    for s in test_strings:
        result = check_brackets(s)
        if result:
            print(f"'{s}': Симетрично")
        else:
            print(f"'{s}': Несиметрично")

if __name__ == "__main__":
    main()
